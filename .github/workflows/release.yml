name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.2.3)'
        required: true
        type: string
      prerelease:
        description: 'Is this a prerelease?'
        required: false
        default: false
        type: boolean

jobs:
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    
    outputs:
      tag: ${{ steps.create-tag.outputs.tag }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"

    - name: Install UV
      uses: astral-sh/setup-uv@v4

    - name: Validate version format
      id: validate
      run: |
        version="${{ github.event.inputs.version }}"
        if [[ ! $version =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)*$ ]]; then
          echo "Error: Invalid version format. Use semantic versioning (e.g., 1.2.3, 1.2.3-rc1)"
          exit 1
        fi
        echo "version=$version" >> $GITHUB_OUTPUT

    - name: Update version in files
      run: |
        version="${{ steps.validate.outputs.version }}"
        
        # Update pyproject.toml
        sed -i "s/version = \".*\"/version = \"$version\"/" pyproject.toml
        
        # Update __init__.py
        sed -i "s/__version__ = \".*\"/__version__ = \"$version\"/" src/nwws_receiver/__init__.py
        
        # Update CHANGELOG.md
        today=$(date +%Y-%m-%d)
        sed -i "1a\\## [$version] - $today\\n" CHANGELOG.md

    - name: Install dependencies
      run: |
        uv sync --group dev --group test

    - name: Run tests
      run: |
        uv run pytest

    - name: Run code quality checks
      run: |
        uv run ruff format --check .
        uv run ruff check .
        uv run basedpyright

    - name: Build package
      run: |
        uv run python -m build

    - name: Check package
      run: |
        uv run python -m twine check dist/*

    - name: Commit version changes
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git add pyproject.toml src/nwws_receiver/__init__.py CHANGELOG.md
        git commit -m "chore: bump version to ${{ steps.validate.outputs.version }}"
        git push

    - name: Create and push tag
      id: create-tag
      run: |
        tag="v${{ steps.validate.outputs.version }}"
        git tag -a "$tag" -m "Release ${{ steps.validate.outputs.version }}"
        git push origin "$tag"
        echo "tag=$tag" >> $GITHUB_OUTPUT

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: prepare-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.prepare-release.outputs.tag }}

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ needs.prepare-release.outputs.tag }}
        name: Release ${{ github.event.inputs.version }}
        generate_release_notes: true
        prerelease: ${{ github.event.inputs.prerelease }}
        draft: false

  notify:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [prepare-release, release]
    if: success()
    
    steps:
    - name: Summary
      run: |
        echo "ðŸŽ‰ Release ${{ github.event.inputs.version }} created successfully!"
        echo "Tag: ${{ needs.prepare-release.outputs.tag }}"
        echo "The publish workflow will automatically trigger to upload to PyPI."