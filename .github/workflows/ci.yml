name: CI

on:
    push:
        branches: [main, develop]
    pull_request:
        branches: [main, develop]
    workflow_dispatch:
    workflow_call:

concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: true

jobs:
    lint-and-format:
        name: Lint and Format
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                  python-version: "3.12"

            - name: Install uv
              uses: astral-sh/setup-uv@v6
              with:
                  enable-cache: true

            - name: Install dependencies
              run: uv sync --dev

            - name: Run ruff format check
              run: uv run ruff format --check

            - name: Run ruff lint
              run: uv run ruff check

    type-check:
        name: Type Check
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                  python-version: "3.12"

            - name: Install uv
              uses: astral-sh/setup-uv@v6
              with:
                  enable-cache: true

            - name: Install dependencies
              run: uv sync --dev

            - name: Install basedpyright
              run: uv add --dev basedpyright

            - name: Run type checking
              run: uv run basedpyright src/nwws_receiver

            - name: Validate typing configuration
              run: uv run python scripts/validate_typing.py

    test:
        name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
        runs-on: ${{ matrix.os }}
        strategy:
            fail-fast: false
            matrix:
                os: [ubuntu-latest, windows-latest, macos-latest]
                python-version: ["3.12", "3.13"]

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Python ${{ matrix.python-version }}
              uses: actions/setup-python@v5
              with:
                  python-version: ${{ matrix.python-version }}

            - name: Install uv
              uses: astral-sh/setup-uv@v6
              with:
                  enable-cache: true

            - name: Install dependencies
              run: uv sync --dev --group test

            - name: Run tests with coverage
              run: |
                  uv add --dev pytest-cov
                  uv run pytest --cov=nwws_receiver --cov-report=xml --cov-report=term-missing

            # - name: Upload coverage to Codecov
            #   if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.12'
            #   uses: codecov/codecov-action@v4
            #   with:
            #       file: ./coverage.xml
            #       fail_ci_if_error: true
            #       token: ${{ secrets.CODECOV_TOKEN }}

    security:
        name: Security Scan
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                  python-version: "3.12"

            - name: Install uv
              uses: astral-sh/setup-uv@v6
              with:
                  enable-cache: true

            - name: Install dependencies
              run: uv sync --dev

            - name: Run safety check
              run: |
                  uv add --dev safety
                  uv run safety check

            - name: Run bandit security scan
              run: |
                  uv add --dev bandit
                  uv run bandit -r src/nwws_receiver -f json -o bandit-report.json
              continue-on-error: true

            - name: Upload bandit report
              uses: actions/upload-artifact@v4
              if: always()
              with:
                  name: bandit-security-report
                  path: bandit-report.json

    build:
        name: Build Distribution
        runs-on: ubuntu-latest
        needs: [lint-and-format, type-check, test, security]
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                  python-version: "3.12"

            - name: Install uv
              uses: astral-sh/setup-uv@v6
              with:
                  enable-cache: true

            - name: Install build dependencies
              run: uv sync --dev

            - name: Build distribution
              run: uv run python -m build

            - name: Verify wheel contents
              run: |
                  uv add --dev wheel
                  uv run python -c "
                  import zipfile
                  import sys
                  with zipfile.ZipFile('dist/nwws_oi_receiver-*.whl'.replace('*', '$(ls dist/*.whl | cut -d'-' -f2)')) as z:
                      files = z.namelist()
                      print('Wheel contents:')
                      for f in sorted(files):
                          print(f'  {f}')
                      if not any('py.typed' in f for f in files):
                          print('ERROR: py.typed not found in wheel!')
                          sys.exit(1)
                      print('✅ py.typed found in wheel')
                  "

            - name: Check wheel metadata
              run: |
                  uv add --dev wheel
                  uv run python -c "
                  from pathlib import Path
                  import zipfile
                  wheel_path = Path('dist/nwws_oi_receiver-*.whl'.replace('*', '$(ls dist/*.whl | cut -d'-' -f2)'))
                  with zipfile.ZipFile(wheel_path) as z:
                      metadata = z.read('nwws_oi_receiver-*.dist-info/METADATA'.replace('*', '$(ls dist/*.whl | cut -d'-' -f2)')).decode()
                      if 'Classifier: Typing :: Typed' not in metadata:
                          print('ERROR: Typing :: Typed classifier not found!')
                          exit(1)
                      print('✅ Typing :: Typed classifier found')
                  "

            - name: Upload build artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: dist
                  path: dist/

    validate-install:
        name: Validate Installation
        runs-on: ubuntu-latest
        needs: build
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                  python-version: "3.12"

            - name: Download build artifacts
              uses: actions/download-artifact@v4
              with:
                  name: dist
                  path: dist/

            - name: Install from wheel
              run: |
                  python -m pip install --upgrade pip
                  python -m pip install dist/*.whl

            - name: Test import and typing
              run: |
                  python -c "
                  from nwws_receiver import WxWire, WxWireConfig
                  from nwws_receiver.message import NoaaPortMessage
                  print('✅ All imports successful')
                  "

            - name: Verify typing works
              run: |
                  pip install basedpyright
                  cat > test_typing.py << 'EOF'
                  from nwws_receiver import WxWireConfig, NoaaPortMessage

                  def test_typing() -> None:
                      config: WxWireConfig = WxWireConfig(email="test@example.com")
                      email: str = config.email
                      print(f"Email: {email}")

                  def handle_message(message: NoaaPortMessage) -> None:
                      text: str = message.text
                      timestamp: str | None = message.timestamp
                      print(f"Message: {text}, Timestamp: {timestamp}")
                  EOF

                  basedpyright test_typing.py
                  echo "✅ Type checking passed"